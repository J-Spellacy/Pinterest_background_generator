from PIL import Image
import numpy as np
from collections import Counter
import colorsys
from sklearn.cluster import KMeans
import os
import shutil
from k_means_constrained import KMeansConstrained

## this code was generated by an LLM, the other files were partially so, but this one is almost entirely (so were the bash scripts)

def average_color_mean(image_path):
    img = Image.open(image_path).convert("RGB")
    arr = np.array(img)
    mean_rgb = arr.reshape(-1, 3).mean(axis=0)
    return tuple(mean_rgb.astype(int))

def average_color_mode(image_path):
    img = Image.open(image_path).convert("RGB")
    arr = np.array(img).reshape(-1, 3)
    counts = Counter(map(tuple, arr))
    return counts.most_common(1)[0][0]

def rgb_to_hsl(rgb):
    r, g, b = [x/255.0 for x in rgb]
    h, l, s = colorsys.rgb_to_hls(r, g, b)
    return (h*360, s, l)  # hue in degrees, s and l in [0,1]

def cluster_images_by_color(input_folder, output_folder, n_clusters=5):
    image_files = [f for f in os.listdir(input_folder) if f.lower().endswith(".png")]
    
    hsl_colors = []
    paths = []
    for fname in image_files:
        path = os.path.join(input_folder, fname)
        rgb = average_color_mean(path)
        hsl = rgb_to_hsl(rgb)
        hsl_colors.append(hsl)
        paths.append(path)
    
    if not hsl_colors:
        print("No images found in folder.")
        return
    
    # Convert HSL â†’ (cos(hue), sin(hue), saturation, lightness) this is to stop wrapping of hue so that 0 and 360 are two separate categories
    X = []
    for h, s, l in hsl_colors:
        h_rad = np.deg2rad(h)
        X.append([np.cos(h_rad), np.sin(h_rad), s, l])
    X = np.array(X)
    
    # Balanced KMeans (enforce nearly equal cluster sizes)
    total = len(X)
    size_min = total // n_clusters
    size_max = size_min + 1
    
    kmeans = KMeansConstrained(
        n_clusters=n_clusters,
        size_min=size_min,
        size_max=size_max,
        random_state=42
    )
    labels = kmeans.fit_predict(X)
    
    # Create output directories
    os.makedirs(output_folder, exist_ok=True)
    for i in range(n_clusters):
        os.makedirs(os.path.join(output_folder, f"cluster_{i}"), exist_ok=True)
    
    # Copy files into cluster folders
    for path, label in zip(paths, labels):
        fname = os.path.basename(path)
        target = os.path.join(output_folder, f"cluster_{label}", fname)
        shutil.copy(path, target)
    
    print(f"Done! Grouped {len(paths)} images into '{output_folder}' with {n_clusters} balanced clusters.")

## loop

if __name__ == "__main__":
    input_folder = "/home/jude/Pictures/pint_pins"    # folder with PNGs
    output_folder = "/home/jude/Pictures/grouped_pint_pins"  # where grouped images will be saved
    cluster_images_by_color(input_folder, output_folder, n_clusters=6)